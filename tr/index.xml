<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yengas</title>
    <link>https://blog.yigitcan.dev/tr/</link>
    <description>Recent content on Yengas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr</language>
    <lastBuildDate>Fri, 16 Aug 2019 12:00:00 +0300</lastBuildDate><atom:link href="https://blog.yigitcan.dev/tr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bir Satranç Oyunu, Node.JS ile İşlemler Arası İletişim ve İş Dağıtımı</title>
      <link>https://blog.yigitcan.dev/tr/nodejs-cpu-heavy-ipc/</link>
      <pubDate>Fri, 16 Aug 2019 12:00:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/tr/nodejs-cpu-heavy-ipc/</guid>
      <description>Bu makalenin konusu, Facebook gruplarından birinde karşılaştığım güzel bir sorudan geliyor. Soru hem temel konularda bilgi sahibi olmayı, hem de kullanılacak aracı iyi tanımayı gerektiriyor. Bu konuda fikirlerimi kısa bir cevap olarak yazarsam, haksızlık ederim diye düşündüm. Aynı zamanda bir şeyler öğrenmek ve kod maymunluğu yapmak için eğlenceli bir konu bulmuş oldum. Ortaya bu makale ve github üzerinde yayınladığım örnek kodlar çıktı. Soruya bakarak, esas konumuzu yavaş yavaş işleyelim.
Bir Satranç Oyunu Anlaşıldığı üzere, arkadaş bir satranç oyunu yapıyor ve kullanıcıyı bilgisayara karşı yarıştırmak istiyor.</description>
    </item>
    
    <item>
      <title>Node.JS Event Loop, Sync/Async, Promise, Async/Await ve RxJS üzerine...</title>
      <link>https://blog.yigitcan.dev/tr/nodejs-async/</link>
      <pubDate>Sat, 10 Mar 2018 03:28:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/tr/nodejs-async/</guid>
      <description>Bu makalede Event Loop, Sync/Async, Promise, Async/Await, RxJS kavramlarını anlatmaya ve tüm bu kavramları tek bir örnek üzerinde kodlayarak göstermeye çalışacağım. Kendi sisteminizde denemeler yapmak istiyorsanız Node versiyonunuzun 8&amp;rsquo;in üzerinde olduğundan emin olun.
Bu makalede yazılan tüm kodların, çalışır hallerine, yengas/async-blog-post@Github adresinden ulaşabilirsiniz.
Problem İlk önce problemimiz ile başlayalım&amp;hellip; Elimde daha önce izlemek için kaydettiğim Ghibli filmlerinin id&amp;rsquo;leri var. Bu filmlerin hepsinin adını ve açıklamasını almak istiyorum.
İlk önce elimdeki dosyanın formatına bakalım&amp;hellip;</description>
    </item>
    
    <item>
      <title>Bu siteyi nasıl yaptım?</title>
      <link>https://blog.yigitcan.dev/tr/personal-website/</link>
      <pubDate>Sun, 20 Nov 2016 16:30:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/tr/personal-website/</guid>
      <description>Github Actions yayınlandıktan sonra, bu projeyi wercker yerine Github Actions kullanacak şekilde değiştirdim. Blog yazıları ve Hugo konfigürasyonu Yengas/yengas.github.io projesinin source branch&amp;rsquo;inde yer alıyor. Bu branch&amp;rsquo;de yapılan her değişiklikte Github Actions html/css/js dosyalarını oluşturup, aynı projenin master branch&amp;rsquo;ine bu dosyaları gönderiyor.
Web platformunu bırakıp, Android ve daha sonrada diğer platform ve teknolojiler ile ilgilenmeye başladığımdan beri, arayüzden çok, backend sistemler ile uğraşmaya başladım. Bu dönemde tamamladığım çoğu proje; ya tek sayfalık bir arayüze sahipti, yada direk olarak arkaplanda çalışıyordu.</description>
    </item>
    
    <item>
      <title>Statik Website Oluşturucuları nedir? Neden tercih edilir?</title>
      <link>https://blog.yigitcan.dev/tr/static-website-generator/</link>
      <pubDate>Sun, 20 Nov 2016 15:00:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/tr/static-website-generator/</guid>
      <description>Web&amp;rsquo;in ilk zamanlarında, tamamen statik olarak çalışan websiteleri, daha sonradan kullanıcılar için özelleştirilmiş deneyimler sunmak ve kullanıcı girdisine göre işlem yaparak çıktı verebilmek için dinamik bir hal aldı. Fakat tarayıcılarımız güçlendikce; bir çok şeyi Javascript kullanarak yapabilir hale geldik. Bu durum hem websitelerinin istemci kısmının daha çok yük üstlenebilmesini, hemde bir websitesinin bir masaüstü veya mobil uygulama gibi, uzak sunucusundan tamamen bağımsız çalışabilmesine olanak sağladı.
Tarayıcı ve Sunucularda çalışan sistemlerin birbirinden bağımsız çalışabilmesi ve geliştirilebilmesi; Javascript kullanarak sitemize entegre edebileceğimiz 3.</description>
    </item>
    
    <item>
      <title>Hakkımda</title>
      <link>https://blog.yigitcan.dev/tr/about/</link>
      <pubDate>Sat, 19 Nov 2016 00:00:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/tr/about/</guid>
      <description>Merhaba, ben Yiğitcan! On yılı aşkın süredir yazılım ile uğraşıyorum. Hem kurumsal hem de startup şirketlerde çalışma fırsatı buldum ve web, mobil, masaüstü gibi farklı platformlarda geliştirme yaptım. Typescript, NodeJS, Golang ve Java, sıkça kullandığım teknolojilerden bazıları.
Bir takım olarak, anlamlı bir ürün geliştirip ortaya koymak en keyif aldığım şeylerden biri. İster backend mimarisi kurgulamak olsun, ister cloud-native teknolojiler ile çalışmak, ister yeni bir şeyler denemek olsun; birlikte öğrenmek ve sorunları çözmek, yazılım dünyasında beni en çok motive eden şey.</description>
    </item>
    
  </channel>
</rss>
