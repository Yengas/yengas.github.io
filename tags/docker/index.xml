<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Yengas</title>
    <link>https://blog.yigitcan.dev/tags/docker/</link>
    <description>Recent content in docker on Yengas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 31 Jan 2017 03:30:00 +0300</lastBuildDate><atom:link href="https://blog.yigitcan.dev/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Docker and Docker-Compose to setup a local working environment, ready to be scaled.</title>
      <link>https://blog.yigitcan.dev/docker-compose-node/</link>
      <pubDate>Tue, 31 Jan 2017 03:30:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/docker-compose-node/</guid>
      <description>Let&amp;rsquo;s talk about running your Node.js applications, in a way that makes it easier to migrate to continuous integration and deployment pipelines later on the road. There are too many things that you can do in DevOps layer that will make your code more readable and easier to maintain. For example:
You can assume that every configuration is retrieved through a single file, then make a spec in your Kubernetes cluster to dynamically create this file through ConfigMaps, which would solve your problem of moving/managing configuration files on multiple servers.</description>
    </item>
    
  </channel>
</rss>
