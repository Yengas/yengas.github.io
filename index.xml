<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yiğitcan UÇUM</title>
    <link>https://blog.yigitcan.dev/</link>
    <description>Yiğitcan UÇUM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 21 Feb 2020 12:00:00 +0300</lastBuildDate>
    
    <atom:link href="https://blog.yigitcan.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Micro-frontend architecture and React with Web Components</title>
      <link>https://blog.yigitcan.dev/posts/micro-frontend-architecture-and-react-with-web-components/</link>
      <pubDate>Fri, 21 Feb 2020 12:00:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/posts/micro-frontend-architecture-and-react-with-web-components/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This blog post is a cross-post of the article originally published on &lt;a href=&#34;https://medium.com/trendyol-tech/micro-frontend-architecture-and-react-with-web-components-c27301c68240&#34;&gt;Medium&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Working as an army of developers divided into 10s of feature teams, one of the big topics in our company is to move to a micro frontend architecture. So every team in our company can be truly cross-functional and have an end-to-end autonomous deployment, decreasing the time to market for the features to be developed. We currently have dozens of different frontend projects developed with a variety of frontend tooling(old fashion template engines, Vue, React, Angular).&lt;/p&gt;
&lt;p&gt;This situation forced us to try out multiple ways of isolating different team’s frontend codes from each other. One of the most successful examples is &lt;a href=&#34;https://github.com/puzzle-js/puzzle-js&#34;&gt;puzzle.js&lt;/a&gt;, which is powering our mobile website. However, not all projects have the tooling for micro frontend architecture ready at hand. So we have to improvise sometimes.&lt;/p&gt;
&lt;p&gt;In this article, I will tell you about a new feature we are rolling out at Trendyol, how we used web components while implementing a part of this new feature, and what we learned. Web Components is an awesome technology that lets you create atomic UI elements with any tooling you want, and then share it with other projects that use different technology stack. I hope this will give you some insight into using Web Components, and some problems with it that you may face. If you want to skip the story and see the code, see our proof-of-concept React app at &lt;a href=&#34;https://github.com/Trendyol/react-webcomponent-poc&#34;&gt;Trendyol/react-webcomponent-poc&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;introducing-the-seller-store-pages&#34; &gt;Introducing the Seller Store Pages
&lt;span&gt;
    &lt;a href=&#34;#introducing-the-seller-store-pages&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Trendyol is one of the biggest e-commerce marketplaces in Turkey. Marketplace sellers in our platform are first-class citizens and our team is always developing new tools to let our sellers reach their target audience.&lt;/p&gt;
&lt;p&gt;This is the story of one such tool. A custom showcase page that lets sellers showcase their products/campaigns/events. Sellers can edit and preview this page anytime that they want using the partner panel. And the customers can access this page using the product detail page or through other channels in/out of our application via deep-link.&lt;/p&gt;
&lt;center style=&#34;margin: 20px 0;&#34;&gt;&lt;img src=&#34;https://blog.yigitcan.dev/img/articles/trendyol-micro-frontend/seller-store-intro.webp&#34; alt=&#34;Two Showcase Pages in Production (Pull&amp;Bear Türkiye and L’Oreal Türkiye)&#34; style=&#34;width:100%; max-width: 600px; @media (min-width: 768px) { width: 50%; }&#34;/&gt;&lt;span style=&#34;color: rgb(107, 107, 107); font-size: 12px;&#34;&gt;Two Showcase Pages in Production (Pull&amp;Bear Türkiye and L’Oreal Türkiye)&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;This feature consists of two core parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementing a dynamic component rendering system on all end-user applications (Affected Teams: Web, Mobile Web, Android, iOS)&lt;/li&gt;
&lt;li&gt;Creating an editor for our sellers where they can customize their page look, upload promotion banners, highlight their products and preview the result (Affected Teams: Seller Center)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A nice example of why we need the Micro frontend architecture. Just a single feature that spans across 5 different teams that develop frontend applications. After consideration, a new feature team was created. The responsibilities of the team including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Development of the Seller Store Page Editor&lt;/li&gt;
&lt;li&gt;Implementation of dynamic component rendering for platforms using web technologies (Web, Mobile Web)&lt;/li&gt;
&lt;li&gt;Development of Backend services handling the business logic of page creation, validation and serving&lt;/li&gt;
&lt;/ul&gt;
&lt;center style=&#34;margin: 20px 0;&#34;&gt;&lt;img src=&#34;https://blog.yigitcan.dev/img/articles/trendyol-micro-frontend/boundries-diagram.webp&#34; alt=&#34;Diagram Showcasing the Boundaries of the Seller Store Team&#34; style=&#34;width:100%; max-width: 600px; @media (min-width: 768px) { width: 50%; }&#34;/&gt;&lt;span style=&#34;color: rgb(107, 107, 107); font-size: 12px;&#34;&gt;Boundaries of the Seller Store Team&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;The mobile team already had a dynamic component rendering system developed to be used in different sections of our applications, making it easy to deliver the initial version of this feature to our customers. As the Seller Store team, we initially created the REST APIs to be used by our mobile team and handcrafted some showcase pages to be used in the production. Also starting to develop the Seller Store Editor in parallel. To be used by our sellers in the existing Partner panel which they use for everything else.&lt;/p&gt;
&lt;h2 id=&#34;integrating-the-seller-store-editor-into-existing-seller-partner-panel&#34; &gt;Integrating the Seller Store Editor into existing Seller Partner Panel
&lt;span&gt;
    &lt;a href=&#34;#integrating-the-seller-store-editor-into-existing-seller-partner-panel&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;As the Seller Store team, React was our framework of choice because we wanted to get dynamic component rendering as fast as possible on web platforms (without Web Components). And those teams already have people experienced with using React to create UIs for our customers. We also wanted to use Redux, Typescript, and RxJS to craft a reactive application that has business logic separated away from UI components as much as possible.&lt;/p&gt;
&lt;center style=&#34;margin: 20px 0;&#34;&gt;&lt;img src=&#34;https://blog.yigitcan.dev/img/articles/trendyol-micro-frontend/seller-store-demo.gif&#34; alt=&#34;GIF Demonstration of Creating Your Own Showcase Page&#34; style=&#34;width:70%; max-width: 400px; @media (min-width: 768px) { width: 35%; }&#34;/&gt;&lt;span style=&#34;color: rgb(107, 107, 107); font-size: 12px;&#34;&gt;Demonstration of Creating Your Own Showcase Page&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;This was our initial challenge. We already have a panel that the sellers in our platform use to manage their Trendyol portfolio. This panel is written in Vue, and we need to embed our editor as a single page in it. In this article, we will talk about the implementation of this particular page.&lt;/p&gt;
&lt;p&gt;Our only requirement was to keep the Seller Store team as autonomous as possible. Initially, we were thinking about using iframes but we decided to give Web Components API a shot. The idea was to use as much feature(authentication, analytics, etc.) as possible from the already existing Vue panel through sync calls / async messages since both our editor and the panel code would be executing on the same page.&lt;/p&gt;
&lt;p&gt;We quickly spun up a POC. Demonstrating how to make a single page React application and expose it as a custom element. This POC had all the CSS for our application encapsulated into a shadow root, exposed itself as a custom element and used redux for routing so it would not break the routing of the original page. You could start using this application in any HTML page as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Seller Partner Panel related code --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$public-url/seller-store.vendor.min.js&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$public-url/seller-store.min.js&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Seller Partner Panel related code --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;seller-store-editor&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Seller Partner Panel related code --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find the POC we created under &lt;a href=&#34;https://github.com/Trendyol/react-webcomponent-poc&#34;&gt;this repository&lt;/a&gt; for reference. Initially, this setup worked really well, however after a period of time working with this and facing some issues, we decided to move away from the web components. Let’s look at those reasons.&lt;/p&gt;
&lt;h2 id=&#34;isolation-of-css-with-shadow-dom&#34; &gt;Isolation of CSS with Shadow DOM
&lt;span&gt;
    &lt;a href=&#34;#isolation-of-css-with-shadow-dom&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;When you are trying to import a frontend component into your project, even if the component is written with the same technology stack, you need a way to isolate their CSS. Otherwise, you will have CSS clashes that may break your or the imported component’s styling. A popular solution to this in the React world is to use CSS-Modules. You import your CSS into JS and let Webpack rename your CSS whilst bundling your code. No more clashes!&lt;/p&gt;
&lt;p&gt;However, you will still have issues if you have global CSS selectors that affect the imported components. The web component API’s solution to this is to create a Shadow DOM. With Shadow DOM, your component will be rendered separately and will not be affected by any external CSS selectors. The same applies to styles you write as well, they won’t affect the parent container.&lt;/p&gt;
&lt;p&gt;When using Shadow DOM with React/Webpack the first issue we faced was with the &lt;a href=&#34;https://github.com/webpack-contrib/style-loader&#34;&gt;style-loader&lt;/a&gt;. By default, every CSS imported by your JS files is automatically injected into &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of the page. And since your Shadow DOM is not rendered as a part of the original page, your styles won’t take effect. There are some solutions to this. You either use the &lt;a href=&#34;https://www.npmjs.com/package/to-string-loader&#34;&gt;to-string-loader&lt;/a&gt; and create a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag inside your Shadow DOM. Or you configure style-loader to inject the styles to your Shadow DOM dynamically. We got the POC working with the &lt;a href=&#34;https://github.com/Wildhoney/ReactShadow&#34;&gt;ReactShadow&lt;/a&gt; and to-string-loader libraries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-shadow&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;styles&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./components/index.scss&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SellerStoreEditorWebComponent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HTMLElement&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getComponentToRender() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;root.div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;SellerStoreEditor&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;styles&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;root.div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this, we isolated our styling from the Vue panel. We used &lt;a href=&#34;https://sass-lang.com/&#34;&gt;SASS&lt;/a&gt; for styling our components and imported every 3rd party components CSS to our root SCSS file. This worked fairly well until we tried to use 3rd party components that used style-loader to inject CSS to &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;. Unfortunately, we could not find a way to override the settings of these components so they would inject their CSS inside our Shadow DOM instead of &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This really restricted our choices when we were selecting components to work with. We either had to fork the component to make it so it won’t inject the CSS to &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, or we would just select another component that did not do this.&lt;/p&gt;
&lt;p&gt;There can be another way of solving this issue permanently that we do not know of, however, there is another issue that is not possible to fix with Webpack tooling.&lt;/p&gt;
&lt;h2 id=&#34;the-issue-with-the-global-query-selectors&#34; &gt;The issue with the global query selectors
&lt;span&gt;
    &lt;a href=&#34;#the-issue-with-the-global-query-selectors&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;When we render all of our SPA inside a Shadow DOM for CSS isolation, another property of the Shadow DOM comes into play. It isolates your DOM elements so they can not be accessed by the &lt;code&gt;document.querySelector&lt;/code&gt; globally. At first glance, this makes sense. We would not want another team&amp;rsquo;s code to interfere with ours, by globally injecting functionality to our DOM elements.&lt;/p&gt;
&lt;p&gt;However, in some cases, you need this. For example when you want to re-use existing functionality like setting up analytics on button clicks. The solution to this would be creating your Shadow DOM in open mode and passing your &lt;code&gt;shadowRoot&lt;/code&gt; reference as a parameter to the initialization code.&lt;/p&gt;
&lt;p&gt;The same problem is faced when you are using libraries that depend on the &lt;code&gt;document.querySelector&lt;/code&gt; In our case, the problem was with the &lt;a href=&#34;https://github.com/elrumordelaluz/reactour#usage&#34;&gt;reactour&lt;/a&gt; library. It uses a selector and finds the element to highlight with &lt;code&gt;document.querySelector&lt;/code&gt; We had to fork the library, just to make it work. You can see similar issues with more popular packages like &lt;a href=&#34;https://github.com/reactstrap/reactstrap/issues/1691&#34;&gt;reactstrap&lt;/a&gt;. Just googling &lt;code&gt;problem OR does not work OR broken &amp;quot;shadow dom&amp;quot; inurl:issues site:github.com&lt;/code&gt; can point you to more issues.&lt;/p&gt;
&lt;p&gt;This was another problem that restricted our selection of components. It added additional complexity to our workflow. We had to fork and manage a private version of a package until our PRs get merged to the public version.&lt;/p&gt;
&lt;p&gt;So we started thinking about if the Web component/Shadow DOM was the right tool for the job. Maybe the API was better suited to be used for smaller elements and not a whole SPA application? Should we change our code to use an Iframe?&lt;/p&gt;
&lt;h2 id=&#34;an-alternative-approach&#34; &gt;An Alternative Approach
&lt;span&gt;
    &lt;a href=&#34;#an-alternative-approach&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;As I have said before, we have other teams in the company who are trying to adopt a Microfrontend architecture. Seller Center Team was one of them. Since the code written in their partner panel is managed by multiple teams, and the monolithic project was getting harder to maintain. They were also experimenting with a new approach to splitting the monolith while we were working on our feature.&lt;/p&gt;
&lt;p&gt;The solution they found was breaking the monolith into different projects and creating a base project that looks at the URL and decides which project to serve. The base project includes the common features(authentication, analytics, support) and the layout header/footer/a div to render your content. So if you enter &lt;code&gt;/product/x&lt;/code&gt; the &lt;strong&gt;product&lt;/strong&gt; project is served. If you enter &lt;code&gt;/seller-store&lt;/code&gt; our project’s Javascript file is served.&lt;/p&gt;
&lt;p&gt;Since the base project they created does not include any CSS/code that would interfere with our code. This seemed like a better way to serve our SPA. We refactored the part of our codebase where we created a custom element and rendered our content into a Shadow DOM. Instead, we served an extra manifest file that points to the latest version of our JS file. And just rendered to a plain old &lt;code&gt;div#app&lt;/code&gt; container.&lt;/p&gt;
&lt;p&gt;This still fitted our needs. We did not worry about the CSS isolation, we could still make calls to common features present in the base project of Seller Partner Panel and we were still autonomous. This also made it possible so we could use any React component we want. So hats off to the Seller Center Team for making this possible :)&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34; &gt;Conclusion
&lt;span&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;It’s surprisingly easy to use Web Components API with React(check out our &lt;a href=&#34;https://github.com/Trendyol/react-webcomponent-poc&#34;&gt;POC&lt;/a&gt;). However, you may have problems with some 3rd party components you are using because they may inject CSS into &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; or use &lt;code&gt;document.querySelector&lt;/code&gt; to try to access elements inside your Shadow DOM.&lt;/p&gt;
&lt;p&gt;Embedding a single-page React application inside a Shadow DOM let us instantly start developing a new feature inside a Vue application. We opted out of using Web Components because of the complexities it brought with it when using 3rd party components. Even if these complexities were solvable, we had a different approach that was better suited to our use case.&lt;/p&gt;
&lt;p&gt;We will be using Web Components API more selectively. We think it will be more useful in cases where a single page consists of more than one project’s components that may talk to each other through sync calls/async messages. Or in cases where you just need a small component that will be used by different technology stacks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spark at Getir and a Story of a Strange Bug</title>
      <link>https://blog.yigitcan.dev/posts/story-of-a-strange-spark-bug/</link>
      <pubDate>Fri, 16 Nov 2018 12:00:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/posts/story-of-a-strange-spark-bug/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This blog post is a cross-post of the article originally published on &lt;a href=&#34;https://medium.com/getir/spark-at-getir-and-a-story-of-a-strange-bug-4b0e4b108b33&#34;&gt;Medium&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;img src=&#34;https://blog.yigitcan.dev/img/articles/getir-spark/spark-logo.webp&#34; alt=&#34;Spark Logo&#34; style=&#34;width:50%; max-width: 450px; @media (min-width: 768px) { width: 35%; }&#34;/&gt;&lt;/center&gt;
&lt;p&gt;At Getir, all the decisions we make and the services we run heavily depend on data. To analyze and process this data, we have been using custom Python scripts since our early days. However as time has passed, and data has grown in volume, these scripts have been slower to respond to our needs. Data processing jobs, which we depend on to make decisions, that once only took minutes, started to take hours. They quickly became harder to maintain, because each of them was written with different paradigms as our understanding of optimization and quality changed over time.&lt;/p&gt;
&lt;p&gt;That is why we decided to move to &lt;a href=&#34;https://spark.apache.org/&#34;&gt;Spark&lt;/a&gt;. By making this change, we aimed to have an infrastructure and source/sink agnostic codebase which would help us transition into a more configurable analysis environment. This infrastructure will let us scale more efficiently and run data processing jobs in parallel, analyze and process cold stored backup files, write out to different types of storage (&lt;a href=&#34;https://www.redshift3d.com/&#34;&gt;Redshift&lt;/a&gt;, &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;Mongo&lt;/a&gt; databases, Avro files), process our data in real-time, and create well documented visual workflows. How Spark has helped us completely improve our analytics process is a story in and of itself. That story, however, is for another time.&lt;/p&gt;
&lt;p&gt;This story is about a strange little bug, one that cost us a minor headache. We started moving our legacy scripts to Spark a month ago, and since we are in the process of moving to Redshift, some of our data that is generated by these scripts were still being written to MongoDB. So the first thought that popped into our heads was to write our Spark generated data to MongoDB as well, without disrupting our services that queried this data.&lt;/p&gt;
&lt;p&gt;So there we were, implementing minor analyze jobs with Spark, and writing the output into MongoDB, to be backward compatible. Soon enough we noticed something was wrong.&lt;/p&gt;
&lt;p&gt;Let’s say we have 2 models: Order and User&lt;/p&gt;
&lt;p&gt;And we want to save a DataSet of orders, where each one refers to a single customer that the order belongs to. E.g. &lt;code&gt;orders = [..., { ...otherFields, customer: ObjectId }]&lt;/code&gt; this data gets inserted into MongoDB successfully. Each Order document, gets a customer field with a type of ObjectId.&lt;/p&gt;
&lt;p&gt;But, if we try to save a DataSet of customers, which has a one-to-many relationship to the aformentioned Order documents, with a field called orders. E.g. &lt;code&gt;customers = [..., { ...otherFields, orders: ObjectId[] }]&lt;/code&gt;, instead of an array of ObjectId’s in MongoDB, we got an array of Objects that had ids of the orders as a string in a field called &lt;code&gt;$oid&lt;/code&gt;! So we got: &lt;code&gt;{ $oid: &#39;abc...&#39; }&lt;/code&gt; instead of &lt;code&gt;ObjectId(&#39;abc...&#39;)&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Being the well-behaving programmers we were the first thing that we thought of was &lt;a href=&#34;https://blog.codinghorror.com/the-first-rule-of-programming-its-always-your-fault/&#34;&gt;the article “It’s Always Your Fault”&lt;/a&gt; by Jeff Atwood. Surely there couldn’t be a bug with writing DataSets to MongoDB. Did we do something wrong? However exhausting every thought we had, and searching all over the web, we couldn’t find any clues that showed that our code was flawed.&lt;/p&gt;
&lt;p&gt;So down the rabbit hole, we went. The first stop was understanding how the DataSet was translated into a MongoDB collection. &lt;a href=&#34;https://github.com/mongodb/mongo-spark&#34;&gt;MongoDB Spark Connector&lt;/a&gt; does this. Given each row in your DataSet, &lt;a href=&#34;https://github.com/mongodb/mongo-spark/blob/r2.2.3/src/main/scala/com/mongodb/spark/sql/MapFunctions.scala#L55&#34;&gt;it decides how to map it to a BsonDocument&lt;/a&gt;, and then writes the results into a MongoDB collection. When doing this operation, &lt;a href=&#34;https://github.com/mongodb/mongo-spark/blob/r2.2.3/src/main/scala/com/mongodb/spark/sql/MapFunctions.scala#L185&#34;&gt;MongoDB types such as ObjectID are converted into structs&lt;/a&gt; for working with a DataSet. This explained the objects that we saw inside the MongoDB collection. So perhaps there was a bug that caused the objects inside of DataSet to not get converted back to Bson types?&lt;/p&gt;
&lt;p&gt;With this understanding, we set out to reproduce our issue with as less code as possible. We wrote a small script that created a constant DataSet which had fields that contained ObjectId and wrote them to a local MongoDB.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.apache.spark.sql.types._
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; org.apache.spark.sql.functions._
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; userName&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; orders &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5b85bda7685ca053517a948b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ahmet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5b85bda764d8194a675a546d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mehmet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5b85bda812c1e568bc6596dc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ahmet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;toDS&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupBy&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;agg&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    first&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;struct&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firstOrder&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    collect_list&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;struct&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orders&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.mongodb.spark.sql.DefaultSource&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;option&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spark.mongodb.output.uri&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mongodb://localhost:27017/local.test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just as we suspected, this small script produced the same unexpected result. The structs inside the DataSet were not converted to Bson type when they were inside an array. The collection that was created by this script can be seen below:&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://blog.yigitcan.dev/img/articles/getir-spark/mongodb-results.png&#34; alt=&#34;MongoDB GUI Client showcasing unexpected result&#34; style=&#34;width:70%; max-width: 600px; @media (min-width: 768px) { width: 50%; }&#34;/&gt;&lt;/center&gt;
&lt;p&gt;Even though the firstOrder field has the type of ObjectId, the orders field is an array of Objects instead of ObjectIds. Now we were sure that something was wrong with the connector. We started inspecting the connector source code, and soon enough we noticed that the recursive function that handled Array and Map types for the DataSet had two small bugs, that caused it to not convert the MongoDB types inside array or maps. We double checked our results and &lt;a href=&#34;https://github.com/Yengas/mongo-spark/commit/75e607f31d33252d4d32b2a821feae977d553174&#34;&gt;created a branch&lt;/a&gt; that worked as we expected.&lt;/p&gt;
&lt;p&gt;After opening a Jira issue for the connector, &lt;a href=&#34;https://jira.mongodb.org/projects/SPARK/issues/SPARK-197&#34;&gt;we talked with the author&lt;/a&gt; about how to merge our fixes into the project and opened a PR for the fix.&lt;/p&gt;
&lt;p&gt;Also when inspecting the code further, we noticed that the DataSet schema to BsonDocument conversion could be optimized further. The Scala code was doing the schema to Bson type inferring for each row, but since the DataSet schema is static for a given list of records, this could be a one time process to infer how to convert the DataSet rows into Bson types. So we did some changes. The code that explains this optimization is below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Previous approach to conversion
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// definition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; rowToDocument&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;row&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BsonDocument&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// usage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;rowToDocument&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// for each line
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The (micro) optimized approach
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// definition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; rowToDocumentMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;schema&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StructType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BsonDocument&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// usage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mapper &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; rowToDocumentMapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dataSet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// one time, before starting the row writing
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;mapper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// for each line
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We made a POC for this in &lt;a href=&#34;https://github.com/Yengas/mongo-spark/commit/a32c8ad7c6dac914cba98f1d46fa064b55ed8e15&#34;&gt;another branch&lt;/a&gt; and talked about the possibility of merging this into the connector with the author of MongoDB Spark Connector as well.&lt;/p&gt;
&lt;p&gt;Both the bug fix and the optimization we did was merged into the MongoDB Spark Connector code. The changes were published with the 2.1.3, 2.2.4 and 2.3.0 versions of the connector. This time it was us that spotted the unicorn or the leprechaun with the pot full of gold. We hope we will be as lucky in the future. See you then.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks to Ross Lawley, the author of MongoDB Spark Connector, for his quick response to our issue and his help in merging our changes into the connector.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>KairosDB inner workings; how does it store data in Cassandra?</title>
      <link>https://blog.yigitcan.dev/kairosdb-inner-workings/</link>
      <pubDate>Thu, 03 Aug 2017 16:10:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/kairosdb-inner-workings/</guid>
      <description>&lt;p&gt;KairosDB is a timeseries database built on Cassandra. Even though it is coded in a way to support different database backends, it is known mostly by its usage of Cassandra as a scaleable and performant time series data storage. With KairosDB, you can store timeseries metric data in different types and then query them with aggregations over time units. In this article, we will look into the details of KairosDB and its two different Cassandra schema to understand how the insert, delete and read operations we do, work under the cover. Cassandra is a database that you need to model your data, regarding to your queries. That is why its important to know how your queries are made to the Cassandra according to your KairosDB data model!&lt;/p&gt;
&lt;p&gt;KairosDB has just released a new version that uses CQL and an improved Cassandra Schema this month. This version &lt;a href=&#34;https://groups.google.com/d/msg/kairosdb-group/V8ViA6RXNZo/7svKXoKcAQAJ&#34;&gt;reportedly&lt;/a&gt; has some performance improvement over the old one. However to be compatible with the old schema, this new version still includes the schema of the old one. Queries are done on the both new and old tables to stay compatible.&lt;/p&gt;
&lt;p&gt;The first thing you need to know before inspecting the schemas, is that most of the data in the old schema has a &lt;code&gt;blob&lt;/code&gt; type. Meaning if you were to query the Cassandra database directly, the returned data would be not human-readable. To get around this when inspecting the database with a GUI or by hand, you can run this Python code in an interpreter to see what the data is: &lt;code&gt;bytearray.fromhex(&#39;7461675f76616c756573&#39;).decode(&#39;utf8&#39;)&lt;/code&gt;. The reason why the data is stored as blobs comes down to custom metric data types and the schema design. We will see this later.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with dissecting the old Cassandra Schema and see how it works for our read/insert/delete operations.&lt;/p&gt;
&lt;h2 id=&#34;old-cassandra-schema&#34; &gt;Old Cassandra Schema
&lt;span&gt;
    &lt;a href=&#34;#old-cassandra-schema&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;This Cassandra Schema is used prior to v1.2.0 for the versions of KairosDB that uses Thrift instead of CQL. Check &lt;a href=&#34;https://gist.github.com/Yengas/541808c4ea65d957f052f179f52e6a07&#34;&gt;this gist&lt;/a&gt; to see the full schema as a gist file.&lt;/p&gt;
&lt;h3 id=&#34;tables&#34; &gt;Tables
&lt;span&gt;
    &lt;a href=&#34;#tables&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;This Schema has a single keyspace called &lt;code&gt;kairosdb&lt;/code&gt; and 3 tables called &lt;code&gt;string_index&lt;/code&gt;, &lt;code&gt;row_key_index&lt;/code&gt; and &lt;code&gt;data_points&lt;/code&gt;. Each of these tables are explained in detail below.&lt;/p&gt;
&lt;p&gt;Metric data for a specific metric and tags are hold in buckets of 3 weeks. This means a new row is created every three weeks to hold metric data for that period of time. The 3 weeks is  &lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/271660f00c009e39e16c1bff536096ec7ed83409/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L92&#34;&gt;hardcoded&lt;/a&gt; into KairosDB and is a design choice. Finding out which buckets to query for a period of time, or which bucket a specific data point belongs to is done with the help of &lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/271660f00c009e39e16c1bff536096ec7ed83409/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L684&#34;&gt;a simple arithmetic calculation&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;string_index&#34; &gt;string_index
&lt;span&gt;
    &lt;a href=&#34;#string_index&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This table has &lt;a href=&#34;https://gist.github.com/Yengas/541808c4ea65d957f052f179f52e6a07#file-cassandra-old-cql-L75&#34;&gt;3 fields&lt;/a&gt; &lt;code&gt;key = blob&lt;/code&gt;, &lt;code&gt;column = text&lt;/code&gt; and &lt;code&gt;value = blob&lt;/code&gt; however only the first two columns are used. KairosDB stores every string it sees on inserts into this table to speed up queries. There are 3 possible values for the &lt;code&gt;key&lt;/code&gt; field, namely &lt;strong&gt;metric_names&lt;/strong&gt;, &lt;strong&gt;tag_names&lt;/strong&gt; and &lt;strong&gt;tag_values&lt;/strong&gt;(stored as UTF-8 blobs). The other field which is used is the &lt;code&gt;column&lt;/code&gt; field, which is used to store seen metric names, tag names and tag values. &lt;del&gt;This table is queried to make sure searching the other tables is not unnecessary for a specific metric/tag.&lt;/del&gt; This table is queried only when &lt;a href=&#34;https://groups.google.com/forum/?hl=en#!topic/kairosdb-group/MlwSRmZjhdU&#34;&gt;populating the KairosDB UI&lt;/a&gt;&amp;rsquo;s metric name dropdown menu. &lt;code&gt;tag_names&lt;/code&gt; and &lt;code&gt;tag_values&lt;/code&gt; are not used and they aren&amp;rsquo;t populated in the new version anymore.&lt;/p&gt;
&lt;h4 id=&#34;data_points&#34; &gt;data_points
&lt;span&gt;
    &lt;a href=&#34;#data_points&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This table has &lt;a href=&#34;https://gist.github.com/Yengas/541808c4ea65d957f052f179f52e6a07#file-cassandra-old-cql-L9&#34;&gt;3 fields&lt;/a&gt; which are used to hold a metric data for a specific metric name and tags.&lt;/p&gt;
&lt;p&gt;The fields for tables are &lt;code&gt;key = blob&lt;/code&gt;, &lt;code&gt;column1 = blob&lt;/code&gt; and &lt;code&gt;value = blob&lt;/code&gt;. The &lt;code&gt;key&lt;/code&gt; field is the concatenation of metric name, bucket start timestamp, the data type and the tags. &lt;code&gt;column1&lt;/code&gt; is the offset of this data&amp;rsquo;s time, relative to the bucket start time, and &lt;code&gt;value&lt;/code&gt; is the serialized binary data for the value(this is how KairosDB can have custom data types) for your metric data. How this columns are utilized are explained below in Workflow section.&lt;/p&gt;
&lt;p&gt;The data in this rows are ordered by their offset time in ASC order, so you can have sequential access to your timeseries data when querying. Also another thing to keep in mind is, since the &lt;code&gt;key&lt;/code&gt; field is used for partioning this data in your Cassandra cluster, each metric data for a specific metric/tags/bucket will be in the same Cassandra node.&lt;/p&gt;
&lt;h4 id=&#34;row_key_index&#34; &gt;row_key_index
&lt;span&gt;
    &lt;a href=&#34;#row_key_index&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This table is used to keep track of which buckets are available in the &lt;code&gt;data_points&lt;/code&gt; table for a specific metric/tags. Lets say you have a time range and you want to do aggregates over a metric with a tag. You need a way of finding matching buckets of data(in &lt;code&gt;data_points&lt;/code&gt;) for this query first. This tables helps you with this.&lt;/p&gt;
&lt;p&gt;It has &lt;a href=&#34;https://gist.github.com/Yengas/541808c4ea65d957f052f179f52e6a07#file-cassandra-old-cql-L42&#34;&gt;3 fields&lt;/a&gt; &lt;code&gt;key = blob&lt;/code&gt;, &lt;code&gt;column1 = blob&lt;/code&gt;, &lt;code&gt;value = blob&lt;/code&gt;. The &lt;code&gt;key&lt;/code&gt; field is the metric name in utf-8 bytes. And the &lt;code&gt;column1&lt;/code&gt; field is the same with the &lt;code&gt;data_points&lt;/code&gt; table&amp;rsquo;s &lt;code&gt;key&lt;/code&gt; field. Meaning metric name + bucket start time + data type + tags concatenated together. The &lt;code&gt;value&lt;/code&gt; field is not used. This table essentially is a way of saying(in plain English); for this metric name, we have these buckets of data with these tags.&lt;/p&gt;
&lt;p&gt;You can later use this information to make your queries. This is explained in detail below in Workflow section.&lt;/p&gt;
&lt;p&gt;This table&amp;rsquo;s partition key is the &lt;code&gt;key&lt;/code&gt; field which holds the metric name. Because of this, all of &lt;code&gt;row_key_index&lt;/code&gt; entries for a single metric get stored in the same cassandra node. This is improved in the new schema.&lt;/p&gt;
&lt;h3 id=&#34;workflow&#34; &gt;Workflow
&lt;span&gt;
    &lt;a href=&#34;#workflow&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Below we try to explain how each insert/read and delete operation is done with this schema so you can better understand the inner workings of KairosDB.&lt;/p&gt;
&lt;p&gt;As an example in this workflow, we will assume that we&amp;rsquo;re holding temperature data for different cities. Lets model it so the metric name is &lt;code&gt;Temperature&lt;/code&gt; and the city information is a tag.&lt;/p&gt;
&lt;h4 id=&#34;insert&#34; &gt;Insert
&lt;span&gt;
    &lt;a href=&#34;#insert&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Let&amp;rsquo;s say you have a metric data with &lt;code&gt;Temperature&lt;/code&gt; metric name, and &lt;code&gt;city=Antalya&lt;/code&gt; tag. For inserting a single metric to this set, we will use &lt;code&gt;33&lt;/code&gt; for the value and &lt;code&gt;1501672887988&lt;/code&gt; for the timestamp.&lt;/p&gt;
&lt;p&gt;We first calculate(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/9469daa937056d84de121ff112a93947e44f960e/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L287&#34;&gt;CassandraDatastore.java Line 287&lt;/a&gt;) which bucket this data belongs to. It&amp;rsquo;s done using the formula &lt;code&gt;timestamp - (timestamp % row_width)&lt;/code&gt; where &lt;code&gt;row_width&lt;/code&gt; is the hardcoded value(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/develop/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L92&#34;&gt;Line 92&lt;/a&gt;) in KairosDB. This then translates to: &lt;code&gt;1501672887988 - (1501672887988 % 1814400000) = 1500508800000&lt;/code&gt;. In unix time, for a data dated &lt;code&gt;08/02/2017 @ 11:21am (UTC)&lt;/code&gt; the bucket start time corresponds to &lt;code&gt;07/20/2017 @ 12:00am (UTC)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We then create(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/9469daa937056d84de121ff112a93947e44f960e/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L289&#34;&gt;Line 289&lt;/a&gt;) a &lt;code&gt;row_key&lt;/code&gt; with this information. This &lt;code&gt;row_key&lt;/code&gt; is the concatenation of Metric Name(&lt;code&gt;Temperature&lt;/code&gt;), the bucket start time we calculated(&lt;code&gt;1500508800000&lt;/code&gt;), the data type(&lt;code&gt;kairos_long&lt;/code&gt;) and our tags(&lt;code&gt;city=Antalya&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Then we move on to making sure(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/9469daa937056d84de121ff112a93947e44f960e/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L298&#34;&gt;Line 298&lt;/a&gt;) we have a &lt;code&gt;row_key_index&lt;/code&gt; entry for the Metric Name(&lt;code&gt;Temperature&lt;/code&gt;) and the &lt;code&gt;row_key&lt;/code&gt; we calculated. And then we put the data in to the &lt;code&gt;data_points&lt;/code&gt; table! We do this by calculating the offset relative to the bucket start time &lt;code&gt;data_time - row_time&lt;/code&gt; in our case: &lt;code&gt;1501672887988 - 1500508800000 = 1164087988&lt;/code&gt;. This all in all translates to an insert to &lt;code&gt;data_points&lt;/code&gt; table with &lt;code&gt;key = row_key&lt;/code&gt;, &lt;code&gt;column1 = offset we calculated&lt;/code&gt; and the &lt;code&gt;value = our metric value = 33&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After the data is written, we write metric names, tag names to the &lt;code&gt;string_index&lt;/code&gt; table.&lt;/p&gt;
&lt;h4 id=&#34;read&#34; &gt;Read
&lt;span&gt;
    &lt;a href=&#34;#read&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;After getting familiar with insert, we don&amp;rsquo;t need to go into details here. It&amp;rsquo;s apparent that, for a time range and metric/tags query, before querying the &lt;code&gt;data_points&lt;/code&gt; table, we need to take a look(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/9469daa937056d84de121ff112a93947e44f960e/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L425&#34;&gt;Line 425&lt;/a&gt;) into &lt;code&gt;row_key_index&lt;/code&gt; table. To do this we create a query into the &lt;code&gt;row_key_index&lt;/code&gt; table with the start and end time of our query(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/9469daa937056d84de121ff112a93947e44f960e/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L582&#34;&gt;Line 582&lt;/a&gt;). This results in a query with Metric Name(e.g. &lt;code&gt;Temperature&lt;/code&gt;) and time range to the &lt;code&gt;row_key_index&lt;/code&gt; table. For each returned result, we match them in-memory with our query(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/9469daa937056d84de121ff112a93947e44f960e/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L712&#34;&gt;Line 712&lt;/a&gt; this requires parsing the binary &lt;code&gt;row_key&lt;/code&gt; values aswell) and then we make queries(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/9469daa937056d84de121ff112a93947e44f960e/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L457&#34;&gt;Line 457&lt;/a&gt;) to &lt;code&gt;data_points&lt;/code&gt; table for each matched bucket.&lt;/p&gt;
&lt;p&gt;This is why its &lt;a href=&#34;https://github.com/kairosdb/kairosdb/wiki/Query-Performance&#34;&gt;not recommended&lt;/a&gt; to have a very populated &lt;code&gt;row_key_index&lt;/code&gt; table with the old schema. Because that may result in too many in-memory comparisons and too many different queries to be made to &lt;code&gt;data_points&lt;/code&gt; table.&lt;/p&gt;
&lt;h4 id=&#34;delete&#34; &gt;Delete
&lt;span&gt;
    &lt;a href=&#34;#delete&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Deletes goes pretty much same with the read. However instead of doing read queries to the &lt;code&gt;data_points&lt;/code&gt; table, we instead make delete queries. A good part to notice here(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/9469daa937056d84de121ff112a93947e44f960e/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L522&#34;&gt;Line 522&lt;/a&gt;) that, if you happen to delete a whole row of data(meaning the time range you gave includes the start and end time of the bucket), its very performant. However if you do a partial deletes and keep querying that row, you may have performance issues because of &lt;a href=&#34;https://opencredo.com/cassandra-tombstones-common-issues/&#34;&gt;Cassandra tombstones&lt;/a&gt;(may even result in your read queries to not respond!).&lt;/p&gt;
&lt;h4 id=&#34;keep-in-mind&#34; &gt;Keep in mind!
&lt;span&gt;
    &lt;a href=&#34;#keep-in-mind&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;An important thing to keep in mind when doing reads/deletes is that; Lets say you have 3 metric names and 300.000 cities. To delete 1 week of data for these 3 metrics on Antalya, KairosDB needs to filter all of your &lt;code&gt;row_key_index&lt;/code&gt; table in-memory and that may translate to millions of comparisons. See calculating &lt;code&gt;row_key_index&lt;/code&gt; size in Optimization section!&lt;/p&gt;
&lt;h2 id=&#34;new-cassandra-schema&#34; &gt;New Cassandra Schema
&lt;span&gt;
    &lt;a href=&#34;#new-cassandra-schema&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The maintainer of the KairosDB database has been doing some work with CQL instead of using THRIFT. The beta version of KairosDB that uses CQL was released in &lt;a href=&#34;https://github.com/kairosdb/kairosdb/releases/tag/v1.2.0-beta2&#34;&gt;July 2017&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This version has some new tables in the Schema, however its still compatible with the old version of KairosDB, meaning it queries both tables for backwards compatibility. There is a small difference that you need to keep in mind, the new version of the Cassandra schema creates &lt;code&gt;string_index&lt;/code&gt; table with the &lt;code&gt;column1&lt;/code&gt; fields as blob. This field was text with the old schema. However these schemas are created only if the table doesn&amp;rsquo;t already exists(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/Schema.java#L50&#34;&gt;Schema.java Line 50&lt;/a&gt;). So it shouldn&amp;rsquo;t cause any problem when upgrading KairosDB to the new version.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;data_points&lt;/code&gt; and &lt;code&gt;string_index&lt;/code&gt; are actively used for the same purpose they were used with the old version.&lt;/p&gt;
&lt;h3 id=&#34;new-tables&#34; &gt;New Tables
&lt;span&gt;
    &lt;a href=&#34;#new-tables&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;row_key_time_index&#34; &gt;row_key_time_index
&lt;span&gt;
    &lt;a href=&#34;#row_key_time_index&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This table has 3 fields &lt;code&gt;metric = text&lt;/code&gt;, &lt;code&gt;row_time = timestamp&lt;/code&gt; and an unused &lt;code&gt;value = text&lt;/code&gt;. Essentially it&amp;rsquo;s job is to hold what buckets we have for a specific metric. It&amp;rsquo;s queried with the time range and the metric name, and the result is used to query the row_keys_index table.&lt;/p&gt;
&lt;h4 id=&#34;row_keys_index&#34; &gt;row_keys_index
&lt;span&gt;
    &lt;a href=&#34;#row_keys_index&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This table holds the &lt;code&gt;row_key&lt;/code&gt; we calculated in a CQL friendly way. It has 4 fields namely; &lt;code&gt;metric = text&lt;/code&gt;, &lt;code&gt;row_time = timestamp&lt;/code&gt;, &lt;code&gt;data_type = text&lt;/code&gt; and &lt;code&gt;tags = frozen&amp;lt;map&amp;lt;text, text&amp;gt;&amp;gt;&lt;/code&gt;. These are used to hold a &lt;code&gt;row_key&lt;/code&gt; in Cassandra table, so they can be queried with their metric, timestamp and data type to be parsed and compared in memory with the query.&lt;/p&gt;
&lt;h3 id=&#34;workflow-1&#34; &gt;Workflow
&lt;span&gt;
    &lt;a href=&#34;#workflow-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;insert-1&#34; &gt;Insert
&lt;span&gt;
    &lt;a href=&#34;#insert-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Insert is pretty simple and almost the same as the old schema and addition is that the CQL commands are run batched. Bucket is calculated, then the &lt;code&gt;row_key&lt;/code&gt; and it&amp;rsquo;s made sure corresponding entries are created in &lt;code&gt;row_key_time&lt;/code&gt;(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CQLBatch.java#L54&#34;&gt;Line 54&lt;/a&gt;) and &lt;code&gt;row_keys&lt;/code&gt;(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CQLBatch.java#L65&#34;&gt;Line 65&lt;/a&gt;), after this the data is inserted into the &lt;code&gt;data_points&lt;/code&gt;(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CQLBatch.java#L116&#34;&gt;Line 116&lt;/a&gt;) and only the metric names are inserted into the &lt;code&gt;string_index&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;read-1&#34; &gt;Read
&lt;span&gt;
    &lt;a href=&#34;#read-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;We still need a way to find which &lt;code&gt;data_points&lt;/code&gt; buckets we need to query. To do this, KairosDB needs to query both old schema&amp;rsquo;s &lt;code&gt;row_key_index&lt;/code&gt; table and the new &lt;code&gt;row_key_time_index&lt;/code&gt; and &lt;code&gt;row_keys&lt;/code&gt; table.&lt;/p&gt;
&lt;p&gt;The old schema is queried like the old version of KairosDB but instead of using Thrift, CQL is used.&lt;/p&gt;
&lt;p&gt;For the new schema; &lt;code&gt;row_key_time_index&lt;/code&gt; is queried with the metric name and the time range(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L780&#34;&gt;Line 780&lt;/a&gt;) to get the buckets available, then multiple queries are made to the &lt;code&gt;row_keys&lt;/code&gt; table(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L788&#34;&gt;Line 788&lt;/a&gt;) and the returning entries are filtered in memory(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L823&#34;&gt;Line 823&lt;/a&gt;) according to the query made.&lt;/p&gt;
&lt;h4 id=&#34;delete-1&#34; &gt;Delete
&lt;span&gt;
    &lt;a href=&#34;#delete-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;New version of cassandra &lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L595&#34;&gt;doesn&amp;rsquo;t seem to delete&lt;/a&gt; &lt;code&gt;row_key_time_index&lt;/code&gt; and &lt;code&gt;row_keys&lt;/code&gt; entries for the metric data. It just deletes the old schema&amp;rsquo;s &lt;code&gt;row_key_index&lt;/code&gt; entry, and the &lt;code&gt;data_points&lt;/code&gt; entries(&lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L595&#34;&gt;Line 595&lt;/a&gt; and &lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java#L614&#34;&gt;Line 614&lt;/a&gt;). There are no delete queries for the new tables in &lt;a href=&#34;https://github.com/kairosdb/kairosdb/blob/842eb20d258377b3bea156919b6275dfb85f4f04/src/main/java/org/kairosdb/datastore/cassandra/Schema.java&#34;&gt;Schema.java&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;optimization-what-to-keep-in-mind&#34; &gt;Optimization, what to keep in mind
&lt;span&gt;
    &lt;a href=&#34;#optimization-what-to-keep-in-mind&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;calculating-your-row_key_index-size&#34; &gt;Calculating your row_key_index size
&lt;span&gt;
    &lt;a href=&#34;#calculating-your-row_key_index-size&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;To do this calculation. Lets say you have 300.000 different cities, and you hold &lt;code&gt;Temperature&lt;/code&gt;, &lt;code&gt;Humidity&lt;/code&gt; and &lt;code&gt;Wind&lt;/code&gt; metrics for these cities. And you decided to model your data in KairosDB so the metric names correspond to the &lt;code&gt;Temperature&lt;/code&gt;, &lt;code&gt;Humidity&lt;/code&gt; and &lt;code&gt;Wind&lt;/code&gt;. And the cities are stored with the &lt;code&gt;city=XXX&lt;/code&gt; tag. You will have &lt;code&gt;N = 300.000 * 3 = 900.000&lt;/code&gt; entries in your &lt;code&gt;row_key_index&lt;/code&gt;. And you get &lt;code&gt;N&lt;/code&gt; more &lt;code&gt;row_key_index&lt;/code&gt; entries each 3 week because KairosDB divides your data into buckets! You can see how this could slow your queries with the Read and Delete, because of in-memory comparisons. The situation is different with the new schema.&lt;/p&gt;
&lt;h3 id=&#34;gotchas-not-many-performance-improvements-slow-deletes-reads&#34; &gt;Gotchas, not many performance improvements&amp;hellip; Slow deletes, reads.
&lt;span&gt;
    &lt;a href=&#34;#gotchas-not-many-performance-improvements-slow-deletes-reads&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;KairosDB isn&amp;rsquo;t the most optimized database when it comes to executing your queries on Cassandra. One of the most apparent feature it lacks, is that when you make a query with same metric name, but different tags, it queries the &lt;code&gt;row_key_index&lt;/code&gt; table multiple times. And considering this metric name is populated, this may cause a lot of slow downs on your system. This can happen both with reads and deletes.&lt;/p&gt;
&lt;p&gt;Lets keep going with our example where we had 3 different metrics &lt;code&gt;Temperature&lt;/code&gt;, &lt;code&gt;Humidity&lt;/code&gt; and &lt;code&gt;Wind&lt;/code&gt; and we had 1 tag named city, which holds the city name. If we were to run a delete query which deletes all of the metrics for 2 different cities &lt;code&gt;Antalya&lt;/code&gt; and &lt;code&gt;Istanbul&lt;/code&gt;, this will cause 2 scans on all of our &lt;code&gt;row_key_index&lt;/code&gt;. Lets think a scenario where we run this kind of query for deleting a big number of cities&amp;hellip; This could cause a serious slowdown with the current schema(s) if you were to make a naive query with multiple metrics. To make this query more performant and make it read the &lt;code&gt;row_key_index&lt;/code&gt; table once, try using group by as mentioned by Brian Hawkins on &lt;a href=&#34;https://groups.google.com/d/msg/kairosdb-group/MlwSRmZjhdU/WndUNMi1AwAJ&#34;&gt;this kairosdb group post&lt;/a&gt;. Example query:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
    &amp;#34;start_absolute&amp;#34;: ...,
    &amp;#34;end_absolute&amp;#34;: ...,
    &amp;#34;metrics&amp;#34;: [{ 
        &amp;#34;name&amp;#34;: &amp;#34;Temperature&amp;#34;,
        &amp;#34;tags&amp;#34;: { &amp;#34;city&amp;#34;: [&amp;#34;Antalya&amp;#34;, &amp;#34;Istanbul&amp;#34;] }, 
        &amp;#34;group_by&amp;#34;: [
            {
              &amp;#34;name&amp;#34;: &amp;#34;tag&amp;#34;,
              &amp;#34;tags&amp;#34;: [ &amp;#34;city&amp;#34; ]
            }
        ]
    }]
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dont-have-too-many-tombstones&#34; &gt;Don&amp;rsquo;t have too many tombstones
&lt;span&gt;
    &lt;a href=&#34;#dont-have-too-many-tombstones&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Cassandra doesn&amp;rsquo;t delete records when you execute a delete query. It just marks them as tombstones and deletes them in the next compaction. Until this compaction happens, every query you make to these sstables, will need to filter out tombstones records and this may cause problem such as your read queries not responding or getting slower. You should keep in mind KairosDB stores 3 weeks of metric data in a row for each specific metric/tag combinations. If you delete some data in the row you are actively using, you may get slow downs/halts/aborts. Please see this &lt;a href=&#34;https://stackoverflow.com/questions/21755286/what-exactly-happens-when-tombstone-limit-is-reached&#34;&gt;stackoverflow question&lt;/a&gt;, regarding this problem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Docker and Docker-Compose to setup a local working environment, ready to be scaled.</title>
      <link>https://blog.yigitcan.dev/docker-compose-node/</link>
      <pubDate>Tue, 31 Jan 2017 03:30:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/docker-compose-node/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s talk about running your Node.js applications, in a way that makes it easier to migrate to continuous integration and deployment pipelines later on the road. There are too many things that you can do in DevOps layer that will make your code more readable and easier to maintain. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can assume that every &lt;strong&gt;configuration&lt;/strong&gt; is retrieved through a single file, then make a spec in your Kubernetes cluster to dynamically create this file through &lt;a href=&#34;https://kubernetes.io/docs/user-guide/configmap/&#34;&gt;ConfigMaps&lt;/a&gt;, which would solve your problem of moving/managing configuration files on multiple servers. You can also mount these &lt;a href=&#34;https://kubernetes.io/docs/user-guide/configmap/&#34;&gt;ConfigMaps&lt;/a&gt; as environment variables.&lt;/li&gt;
&lt;li&gt;You can make your &lt;strong&gt;service discovery&lt;/strong&gt; by making the hostnames/ports of the services you&amp;rsquo;re using variable. This will give you the flexibility of either using an intermediary DNS server(e.g. &lt;a href=&#34;https://kubernetes.io/docs/admin/dns/&#34;&gt;kube-dns&lt;/a&gt;), or entering static values(e.g. &lt;code&gt;localhost&lt;/code&gt; or docker service name).&lt;/li&gt;
&lt;li&gt;You can &lt;strong&gt;log&lt;/strong&gt; everything to &lt;code&gt;stdout&lt;/code&gt; in your code. Then use a collector like &lt;a href=&#34;http://www.fluentd.org/&#34;&gt;fluentd&lt;/a&gt; to forward your logs to a centralized logging solution to analyze and report on.&lt;/li&gt;
&lt;li&gt;You can leave out anything related to simple cpu/memory &lt;strong&gt;monitoring&lt;/strong&gt;. Then use something like &lt;a href=&#34;https://github.com/kubernetes/heapster&#34;&gt;heapster&lt;/a&gt; to retrieve these data through docker.&lt;/li&gt;
&lt;li&gt;You can leave out any &lt;strong&gt;rate limiting&lt;/strong&gt; to be handled before any request reaches to your services by putting up a reverse proxy in front of your services.&lt;/li&gt;
&lt;li&gt;You can forget about &lt;strong&gt;mapping domains/paths&lt;/strong&gt; to backend services and use dynamic reverse-proxy configurations(e.g. &lt;a href=&#34;https://github.com/kubernetes/contrib/tree/master/ingress/controllers&#34;&gt;Kubernetes ingress controller&lt;/a&gt;) to handle it in your operations layer.&lt;/li&gt;
&lt;li&gt;You can assume that a specific folder is shared between multiple instances of your processes, then use &lt;a href=&#34;https://github.com/kubernetes/kubernetes/tree/master/examples/volumes/nfs&#34;&gt;NFS volume mounts&lt;/a&gt; to have a truly shared filesystem between multiple nodes in your cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all helpful&amp;hellip; but maybe hard for you to setup all at once, or you just may not have the resources. This doesn&amp;rsquo;t mean you should code your services like you don&amp;rsquo;t have these options. You can mostly have the juicy parts of these features just by using Docker and some clever structuring/configuration. Below i will explain how to achieve a working environment that will make it easy for you to push your services into Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34; &gt;Configuration
&lt;span&gt;
    &lt;a href=&#34;#configuration&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Have a single configuration file that retrieves your environment specific configurations through environment variables, and holds the other kind of information(configuration you would like to have in your source control) as hardcoded.&lt;/p&gt;
&lt;p&gt;This will make it possible for you to plug-in different kinds of environment files on different environments. You can achieve this by using &lt;code&gt;env_file&lt;/code&gt; in &lt;code&gt;docker-compose&lt;/code&gt; or &lt;code&gt;ConfigMap&lt;/code&gt; in Kubernetes. You also have the chance to dynamically create this file in your docker entrypoint and override it with a configuration retrieved from a database or somewhere else.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configurations that changes from host to host or environment to environment should be retrieved as environment variables or files.&lt;/li&gt;
&lt;li&gt;Configurations that change the business logic related behaviour of the application should be stored within scm(git, svn).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;single-configuration-file&#34; &gt;Single Configuration File
&lt;span&gt;
    &lt;a href=&#34;#single-configuration-file&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// config.js
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Good old way of getting configurations.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DATABASE_PORT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Multi-level objects can be stored as .json files and then serialized into ENV variables.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SESSION_OPTIONS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Magic string should be in our scm
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;magic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After having a configuration file like this. You can create &lt;code&gt;.env.example&lt;/code&gt; to hold the default values, and use specific configurations for each environments (as: &lt;code&gt;.env.{ENVIRONMENT}&lt;/code&gt;). These files can be loaded with docker-compose to your container&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt;. You can also create Kubernetes spec to mount Environment Variables from &lt;code&gt;ConfigMaps&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;docker-envfile-example&#34; &gt;Docker Envfile (Example)
&lt;span&gt;
    &lt;a href=&#34;#docker-envfile-example&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# docker-compose.yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;xxx:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;env_file&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./.env.development&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;shared-files&#34; &gt;Shared Files
&lt;span&gt;
    &lt;a href=&#34;#shared-files&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;You can use docker named volumes for folders you would like to share between multiple instances of your services, or to store persistent information between container re-creates.&lt;/p&gt;
&lt;p&gt;There is also the ability to create named volumes backed by AWS storage or NFS. You&amp;rsquo;re almost as flexible as you would have been with Kubernetes and it&amp;rsquo;s much more easier.&lt;/p&gt;
&lt;h3 id=&#34;named-volumes-example&#34; &gt;Named Volumes (Example)
&lt;span&gt;
    &lt;a href=&#34;#named-volumes-example&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# docker-compose.yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;database-storage&lt;/span&gt;: {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;database&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mariadb:10.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;database-storage:/var/lib/mysql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;service-discovery&#34; &gt;Service Discovery
&lt;span&gt;
    &lt;a href=&#34;#service-discovery&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;You should make all of your remote dependencies host names and ports configurable. Use the suggested single configuration file strategy to hold your host name and port information. You can use static ip addresses like &lt;code&gt;localhost&lt;/code&gt; or public ips in one environment configuration, and use custom hostnames like &lt;code&gt;database&lt;/code&gt; in another to let it resolve through a DNS.&lt;/p&gt;
&lt;p&gt;Docker supports DNS resolving of containers that run in the same network. You can easily run 2 different services called &lt;code&gt;database&lt;/code&gt; and &lt;code&gt;application&lt;/code&gt; and both will see each other in their given name, thanks to the DNS service supplied by Docker. You can also add extra hosts with static ip resolutions using &lt;code&gt;extra_hosts&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;docker-networks-example&#34; &gt;Docker Networks (Example)
&lt;span&gt;
    &lt;a href=&#34;#docker-networks-example&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# docker-compose.yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;redisnetwork&lt;/span&gt;: { &lt;span style=&#34;color:#f92672&#34;&gt;driver&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bridge }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;xxx:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Extra host is defined here.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# This service can resolve both database and google hostnames.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;extra_hosts&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;&amp;amp;default_hosts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google:172.217.17.174&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;database&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mariadb:10.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# This service can resolve both application and google hostnames.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;extra_hosts&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;*default_hosts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Only problem with this setup is when you would like to spin up multiple instances of a given container. You can spin up a reverse proxy container to load balance the recv requests to itself and forward them to other services defined in the docker-compose file. With Kubernetes, you can use a &lt;code&gt;Service&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;auto-restarting&#34; &gt;Auto Restarting
&lt;span&gt;
    &lt;a href=&#34;#auto-restarting&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Most of the continuous integration pipelines are built to output a single docker image that could be run as if the whole project were a single binary. This means adding your source code into the image, installing all dependencies and making the main file of your project the entrypoint. However a Dockerfile designed for this process is not very useful when working locally. Since the source code is added to the image in the &lt;code&gt;docker build&lt;/code&gt; process, changes you make on your code after the build phase will not change how the containers created by the previously built images behaves.&lt;/p&gt;
&lt;p&gt;This is why i have 2 different Dockerfiles, one for building &lt;code&gt;binary&lt;/code&gt; images and one for development. The trick with development Dockerfile is that we add our source code into the container, not into the image. This means mounting the source directory from the Host to the Docker container. Things you need to take into consideration here is as follows;&lt;/p&gt;
&lt;h3 id=&#34;docker-container-volume-mounts&#34; &gt;Docker Container Volume Mounts
&lt;span&gt;
    &lt;a href=&#34;#docker-container-volume-mounts&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Docker containers can mount directories from where the docker engine runs, not from the machine you run the &lt;code&gt;docker&lt;/code&gt; command from. Meaning if you&amp;rsquo;re using Virtualbox or a remote server as your Docker Host, this virtual/remote machine should have access to your source code. Since we&amp;rsquo;re talking about local development. You&amp;rsquo;re probably running docker-engine and docker cli in the same machine, or you have your docker-engine in a virtual box.&lt;/p&gt;
&lt;p&gt;In case of a Virtualbox, make sure your source code&amp;rsquo;s root folder is shared with the guest os. This is automatically configured for Windows Toolbox. Toolbox mounts &lt;code&gt;C:\Users&lt;/code&gt; into &lt;code&gt;/c/users&lt;/code&gt; of the docker-engine guest os. However the docker-compose that comes with the Toolbox can&amp;rsquo;t mount from &lt;code&gt;/c/users&lt;/code&gt;. You will have a weird error about how the volume mount includes invalid characters, and you should use absolute paths. In this case you should set &lt;code&gt;COMPOSE_CONVERT_WINDOWS_PATHS&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt; in the terminal you run docker-compose.&lt;/p&gt;
&lt;p&gt;In other scenarios like running docker-compose under Hyper-V or native Linux, there shouldn&amp;rsquo;t be any problems.&lt;/p&gt;
&lt;h3 id=&#34;dependency-installation&#34; &gt;Dependency Installation
&lt;span&gt;
    &lt;a href=&#34;#dependency-installation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You should never mount your &lt;code&gt;node_modules&lt;/code&gt; into a container. There are packages which require libraries that are specifically built for your operating system. In these cases, mounting an incompatible library will cause your application to not work.&lt;/p&gt;
&lt;p&gt;This is why you should run &lt;code&gt;npm install&lt;/code&gt; inside the image and only mount the source code needed to run your service. This may require you to &lt;code&gt;build-essentials&lt;/code&gt; into your image. If you&amp;rsquo;re using an image that doesn&amp;rsquo;t have it like &lt;code&gt;alpine-node&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;utilities&#34; &gt;Utilities
&lt;span&gt;
    &lt;a href=&#34;#utilities&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You will need utilities to watch for code changes and restart your application. Easiest to setup utilities and most frequently used ones are &lt;code&gt;forever&lt;/code&gt; and &lt;code&gt;nodemon&lt;/code&gt;. However keep in mind that &lt;code&gt;nodemon&lt;/code&gt; needs to exit when your application crashes, so forever will pick up that your application has been terminated, and restart it. This can be done using the &lt;code&gt;--exitcrash&lt;/code&gt; flag of &lt;code&gt;nodemon&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And another thing to keep in mind is that &lt;code&gt;nodemon&lt;/code&gt; uses &lt;code&gt;inotify&lt;/code&gt; to watch for file changes. This may not work in case you&amp;rsquo;re using Hyper-V or Virtualbox. You can fix this by using polling.&lt;/p&gt;
&lt;h3 id=&#34;development-dockerfile-example&#34; &gt;Development Dockerfile (Example)
&lt;span&gt;
    &lt;a href=&#34;#development-dockerfile-example&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Dockerfile&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; alpine-node:6.9.1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mkdir /application&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; npm install -g nodemon&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; npm install -g forever&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /application&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ADD&lt;/span&gt; ./package.json package.json&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; npm install&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;VOLUME&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /application/src&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;EXPOSE&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 80&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; forever --spinSleepTime &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; --minUptime &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nodemon --exitcrash -L --watch /application/src&amp;#39;&lt;/span&gt; /application/src/index.js&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create an image that will have all the dependencies installed for a given nodejs service. You can then mount the source code from your host to a container which was created by this image, and you will have a autorestarting nodejs microservice that restarts everytime you make a change.&lt;/p&gt;
&lt;p&gt;An accompanying docker-compose file should be like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       - &lt;span style=&#34;color:#ae81ff&#34;&gt;./application/src:/application/src &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However you shouldn&amp;rsquo;t use forever while building a &lt;code&gt;binary&lt;/code&gt; image. The process of restarting your application once it crashes/fails should be handled in your operations layer aswell. Most of the container runtimes like &lt;code&gt;Docker Swarm&lt;/code&gt; and &lt;code&gt;Kubernetes&lt;/code&gt; have this option by default. Check &lt;a href=&#34;https://docs.docker.com/compose/compose-file/#/restartpolicy&#34;&gt;restart_policy&lt;/a&gt; that came out with docker-compose v3 and &lt;a href=&#34;https://kubernetes.io/docs/user-guide/deployments/&#34;&gt;Deployments&lt;/a&gt; in Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34; &gt;Conclusion
&lt;span&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;We talked about what we can gain using DevOps. Instead of manually scripting solutions into our business logic, we can use containers and container runtimes to make it easy to reason about general problems of microservices. We showed that we didn&amp;rsquo;t need any complex setups or configurations to start coding our services in a way that makes them more readable, and easier to migrate to a container runtimes.&lt;/p&gt;
&lt;p&gt;With the advance of technologies such as Docker and Kubernetes, your services should only include code about your business logic. Not about your infrastructure.&lt;/p&gt;
&lt;h3 id=&#34;a-local-working-environment-example&#34; &gt;A local working environment (Example)
&lt;span&gt;
    &lt;a href=&#34;#a-local-working-environment-example&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Below is an example of backend application using Mariadb database with prepopulated sql data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# docker-compose.yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Network for creating isolated container groups&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Server group that contains database and application.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;servernetwork&lt;/span&gt;: { &lt;span style=&#34;color:#f92672&#34;&gt;driver&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bridge }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Named volumes for tidy storage on docker host.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Database storage volume.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;database-storage&lt;/span&gt;: {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;database&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mariadb:10.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Expose the port to localhost so you can connect with a database client.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Make the data persistent in a named volume.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;database-storage:/var/lib/mysql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Add startup data for the Mariadb container.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./database/backup:/docker-entrypoint-initdb.d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Add to the server network&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;servernetwork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# make Mariadb run with empty pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;MYSQL_ALLOW_EMPTY_PASSWORD=true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;application&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Change the build context to the development file.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Its always nice to have the &amp;#39;binary` building dockerfile as the default.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;context&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;dockerfile&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Dockerfile-development&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Link the host directory to container.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./application/src:/application/src&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;env_file&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Get the configuration from the dotenv file.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./application/.env.development&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Expose the port.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Add the port.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;servernetwork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;depends_on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# make sure the database starts up with application.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# doesn&amp;#39;t guarantee that the database will be ready before backend works.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;database&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sample-project-with-a-pre-populated-database&#34; &gt;Sample Project with a pre-populated database.
&lt;span&gt;
    &lt;a href=&#34;#sample-project-with-a-pre-populated-database&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You can check &lt;a href=&#34;https://github.com/Yengas/nodejs-docker-bootstrap&#34;&gt;Yengas/nodejs-docker-bootstrap&lt;/a&gt; which is a starter application i&amp;rsquo;ve made by following the above recommendations. It also includes a samples section that shows how to deploy a Nodejs application made this way into Kubernetes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I Made This Blog?</title>
      <link>https://blog.yigitcan.dev/personal-website/</link>
      <pubDate>Sun, 20 Nov 2016 16:30:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/personal-website/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;[2023-08-16] I&amp;rsquo;ve switched to the &lt;a href=&#34;https://github.com/Mitrichius/hugo-theme-anubis&#34;&gt;anubis theme&lt;/a&gt; in favor of more minimal design, and light/dark mode support.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[2020-05-14] After the release of &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt; i refactored this project to work with it instead of wercker. Blog posts and configuration for the Hugo is stored under the &lt;em&gt;source&lt;/em&gt; branch of &lt;a href=&#34;https://github.com/Yengas/yengas.github.io/tree/source&#34;&gt;Yengas/yengas.github.io&lt;/a&gt;, Github Actions builds and pushes html/css/js files on the &lt;em&gt;master&lt;/em&gt; branch of the same repository.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I haven&amp;rsquo;t been designing any GUI&amp;rsquo;s since i switched from Web development to other platforms. Most of the projects i&amp;rsquo;ve worked on for the last few years were either single page designs, or they worked in the background.&lt;/p&gt;
&lt;p&gt;Even though i&amp;rsquo;m not very up-to-date with web technologies(except trying out &lt;code&gt;React&lt;/code&gt;&amp;amp;&lt;code&gt;Redux&lt;/code&gt; for a few weeks), i always wanted to experiment with Static Website Generators. After investigating a little bit, i decided to make this blog using &lt;code&gt;Hugo&lt;/code&gt; and &lt;code&gt;Github Pages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I created 2 projects called &lt;code&gt;personal-website&lt;/code&gt; and &lt;code&gt;yengas.github.io&lt;/code&gt;. &lt;code&gt;personal-website&lt;/code&gt; included my Hugo configurations, blog posts and static assets, and the &lt;code&gt;yengas.github.io&lt;/code&gt; was for hosting the output of my Hugo builds. I wanted to automate this process so i could post from anywhere(specially mobile) and my blog would automatically update.&lt;/p&gt;
&lt;p&gt;At first, i thought about creating a &lt;code&gt;continous integration&lt;/code&gt; pipeline via &lt;code&gt;Jenkins&lt;/code&gt; on my &lt;code&gt;DigitalOcean&lt;/code&gt; hosted VPS. But after reading more about Hugo, i found out there was a third party service called &lt;a href=&#34;http://www.wercker.com/&#34;&gt;wercker&lt;/a&gt; that could make this process easier, and require no setup. The only downside is that it requires full access to your Github account. I don&amp;rsquo;t have any critical code on my Github account, so i decided to use wercker.&lt;/p&gt;
&lt;p&gt;This way, i would have completely free and automated personal blog whose performance and security depends on Github Pages and my Github Account credentials.&lt;/p&gt;
&lt;p&gt;I only had few struggles while i was trying to set this up. First of all, there isn&amp;rsquo;t an up-to-date wercker script that pushes a git project to master branch of a repository. So i had to create a bash script inside of my wercker config to publish my project to gh-pages.&lt;/p&gt;
&lt;p&gt;Also, the theme(&lt;a href=&#34;https://github.com/tmaiaroto/hugo-redlounge&#34;&gt;hugo-redlounge&lt;/a&gt;) i decided to use didn&amp;rsquo;t have a multilingual support, so i had to learn more about Hugo and customize the template to my needs. I added internationalization, a list of languages, and a feature to switch the post language if there is a translation.&lt;/p&gt;
&lt;p&gt;If you would like to setup a similiar website, you could check out this website&amp;rsquo;s &lt;a href=&#34;https://github.com/Yengas/personal-website&#34;&gt;source code&lt;/a&gt; on Github. You could also checkout my fork of &lt;a href=&#34;https://github.com/Yengas/hugo-redlounge&#34;&gt;hugo-redlounge&lt;/a&gt; theme, which has some fixes and the multilingual support i was talking about.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.yigitcan.dev/about/</link>
      <pubDate>Sat, 19 Nov 2016 00:00:00 +0300</pubDate>
      
      <guid>https://blog.yigitcan.dev/about/</guid>
      <description>&lt;p&gt;Hello, I&amp;rsquo;m Yiğitcan! For over a decade, I&amp;rsquo;ve been involved in software development, working with both corporate and startup companies, developing for different platforms like web, mobile, and desktop. Typescript, NodeJS, Golang, and Java are some of the technologies I frequently use.&lt;/p&gt;
&lt;p&gt;Building meaningful products as a team is one of my favorite things to do. Whether it&amp;rsquo;s designing backend architecture, engaging with cloud-native technologies, or experimenting with something new, learning and solving problems together is what motivates me most in the software world.&lt;/p&gt;
&lt;p&gt;You can follow my projects and work on &lt;a href=&#34;https://github.com/Yengas&#34;&gt;Github&lt;/a&gt;, or read my opinions and tutorials about various software topics on this blog. If you want to collaborate with me, feel free to reach out on &lt;a href=&#34;https://www.linkedin.com/in/yigitcanucum/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
